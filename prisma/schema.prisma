
// Prisma schema for SoundHaven

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// User model
model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  password      String
  name          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  playlists     Playlist[]
  followedArtists Artist[] @relation("UserFollowsArtist")
}

// For storing refresh tokens
model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  expiresIn DateTime
}

// Artist model
model Artist {
  id            Int       @id @default(autoincrement())
  name          String
  bio           String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  albums        Album[]
  followers     User[]    @relation("UserFollowsArtist")
}

// Album model
model Album {
  id            Int       @id @default(autoincrement())
  title         String
  releaseDate   DateTime
  artistId      Int
  artist        Artist    @relation(fields: [artistId], references: [id])
  tracks        Track[]
}

// Track model
model Track {
  id            Int       @id @default(autoincrement())
  title         String
  duration      Int       // Duration in seconds
  albumId       Int?
  album         Album?    @relation(fields: [albumId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Playlist model
model Playlist {
  id            Int       @id @default(autoincrement())
  title         String
  description   String?
  userId        Int
  user          User      @relation(fields: [userId], references: [id])
  tracks        Track[]   @relation("TracksInPlaylist")
}

// Genre model
model Genre {
  id            Int       @id @default(autoincrement())
  name          String    @unique
  tracks        Track[]   @relation("TracksInGenre")
}

// Many-to-Many relation between Tracks and Playlists
model TracksInPlaylist {
  track   Track   @relation(fields: [trackId], references: [id])
  trackId Int

  playlist   Playlist @relation(fields: [playlistId], references: [id])
  playlistId Int

  @@id([trackId, playlistId])
}

// Many-to-Many relation between Tracks and Genres
model TracksInGenre {
  track   Track   @relation(fields: [trackId], references: [id])
  trackId Int

  genre   Genre   @relation(fields: [genreId], references: [id])
  genreId Int

  @@id([trackId, genreId])
}
